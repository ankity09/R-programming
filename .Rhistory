table <- sqldf("select * from table1 where V4=1")
table <- sqldf("select * from table1 where V2=0 and  V1=0 and V4=1")
table <- sqldf("select * from table1 where V2=0 and  V1=1 and V4=1")
table <- sqldf("select * from table1 where V2=0 and  V1=1")
table <- sqldf("select * from table1 where V2=0 and  V1=2")
table <- sqldf("select * from table1 where V2=0 and  V1=3")
table <- sqldf("select * from table1 where V2=0 and  V1=1 and V4=1")
table <- sqldf("select * from table1 where V2=0 and  V1=2 and V4=1")
table <- sqldf("select * from table1 where V2=0 and  V1=3 and V4=1")
table <- sqldf("select * from table1 where V2=0 and V4=1")
192/862*100
57/175*100
14/168*100
75/462*100
20/23*100
140/144*100
80/93*100
76/165*100
27/79*100
22.27/100
8.33/100
B = matrix(
+   c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,-,1.00,1.00,0.3417),
+   nrow=4,
+   ncol=3)
B = matrix(  c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,-,1.00,1.00,0.3417), nrow=4,ncol=3)
B = matrix(  c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,-,1.00,1.00,0.3417) nrow=4,ncol=3)
B = matrix(  c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,0,1.00,1.00,0.3417) nrow=4,ncol=3)
install package(base)
install(base)
install.packages(base)
install.packages("base64")
B = matrix(  c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,0,1.00,1.00,0.3417) nrow=4,ncol=3)
B = matrix(  c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,0,1.00,1.00,0.3417) nrow = 4,ncol=3)
B = matrix(  c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,0,1.00,1.00,0.3417), nrow = 4,ncol = 3)
hist(B)
View(B)
View(B)
View(B)
barplot(data, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of "Your" survival on the Titanic"
xlab="man",ylab="probabilty")
barplot(data, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of "Your" survival on the Titanic"
xlab="man",ylab="probabilty")
barplot(data, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of "Your" survival on the Titanic"
,xlab="man",ylab="probabilty")
barplot(data, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic"
,xlab="man",ylab="probabilty")
barplot(data, beside=TRUE,col = c("red","orange","steelblue3"),bor=NA,main="Proabability of Your survival on the Titanic"
,xlab="man",ylab="probabilty")
barplot(data, beside=TRUE,col = c("steelblue3"),bor=NA,main="Proabability of Your survival on the Titanic"
,xlab="man",ylab="probabilty")
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic"
,xlab="man",ylab="probabilty")
dimnames(rmatrix) <- list(rownames(rmatrix, do.NULL = FALSE,Crew,First,Second,Third),
colnames(rmatrix, do.NULL = FALSE,Male,Female,Children))
dimnames(rmatrix) <- list(rownames(rmatrix, do.NULL = FALSE,Crew,rmatrix, do.NULL = FALSE,rmatrix, do.NULL = FALSE,First,rmatrix, do.NULL = FALSE,Second,rmatrix, do.NULL = FALSE,Third),
colnames(rmatrix, do.NULL = FALSE,Male,rmatrix, do.NULL = FALSE,Female,rmatrix, do.NULL = FALSE,Children))
colnames(B) <- Male[ncol(B)]
colnames(B) <- Male[ncol(B)]
dimnames(B) <- list(rownames(B,"row"),
colnames(B,"col"))
dimnames(B) <- list(rownames(B, do.NULL = FALSE, prefix = "row"),
colnames(B, do.NULL = FALSE, prefix = "col"))
dimnames(B) <- list(rownames(B, do.NULL = FALSE,"row","row34","row56","row23"),
colnames(B, do.NULL = FALSE, prefix = "col"))
dimnames(B) <- list(rownames(B, do.NULL = FALSE, prefix = "row",prefix = "row21"),
colnames(B, do.NULL = FALSE, prefix = "col"))
colnames(B) <- c("Male","Female","Children")
View(B)
View(B)
rownamesnames(B) <- c("Crew,"First","Second","Third")
rownames(B) <- c("Crew,"First","Second","Third")
rownames(B) <- r("Crew,"First","Second","Third")
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic"
,xlab="man",ylab="probabilty")
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"))
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"))
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"))
row.names(B) <- r("Crew","First","Second","Third")
row.names(B) <- c("Crew","First","Second","Third")
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic"
:
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic"
+         ,xlab="man",ylab="probabilty")
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",xlab="man",ylab="probabilty")
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",xlab="man",ylab="probabilty")
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",xlab="man",ylab="probabilty")
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"),inset = 0)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",xlab="man",ylab="probabilty")
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"),inset = 0)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",xlab="man",ylab="probabilty")
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"),inset = 0)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",xlab="man",ylab="probabilty")
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty")
legend(locator(1),rownames(B),fill=c("red","orange","steelblue3","thistle3"),inset = 0)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",density = 10)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty")
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width = 2)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width = 1)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width = 0.5)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.5))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(1))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(1,2))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(1,1,1,1))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(1,1,1,0.5))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.5,0.5,0.5,0.5))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1),space = 2)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1),space =0.5)
barplot(B, beside=TRUE,col = c("red","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#FFFFFF","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#3C3C3B","orange","steelblue3","thistle3"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#3C3C3B","#EC881D","#703092","#0079DB"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#CD391F","#EC881D","#703092","#0079DB"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#CD391F","#0088A8","#703092","#0079DB"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#CD391F","#0088A8","#EC881D","#0079DB"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#CD391F","#0088A8","#EC881D","#703092"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#0088A8","#CD391F","#EC881D","#703092"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="probabilty",width =c(0.1,0.1,0.1,0.1))
barplot(B, beside=TRUE,col = c("#0088A8","#CD391F","#EC881D","#703092"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="Probabilty",width =c(0.1,0.1,0.1,0.1))
legend(locator(1),rownames(B),fill=c("#0088A8","CD391F","EC881D","703092"),inset = 0)
legend(locator(1),rownames(B),fill=c("#0088A8","CD391F","EC881D","703092"))
barplot(B, beside=TRUE,col = c("#0088A8","#CD391F","#EC881D","#703092"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="Probabilty",width =c(0.1,0.1,0.1,0.1))
legend(locator(1),rownames(B),fill=c("#0088A8","orange","steelblue3","thistle3"),inset = 0)
barplot(B, beside=TRUE,col = c("#0088A8","#CD391F","#EC881D","#703092"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="Probabilty",width =c(0.1,0.1,0.1,0.1))
legend(locator(1),rownames(B),fill=c("#0088A8","#CD391F","EC881D","703092"),inset = 0)
legend(locator(1),rownames(B),fill=c("#0088A8","#CD391F","orange","703092"),inset = 0)
barplot(B, beside=TRUE,col = c("#0088A8","#CD391F","#EC881D","#703092"),bor=NA,main="Proabability of Your survival on the Titanic",ylab="Probabilty",width =c(0.1,0.1,0.1,0.1))
legend(locator(1),rownames(B),fill=c("#0088A8","#CD391F","orange","703092"),inset = 0)
history
bplot1 <- barplot(survived, main="survived",xlab="survived",col=c("yellow"),names.arg = c("no","yes"),horiz=TRUE)
text(x=counts+0.3,y=bplot1,labels= as.character(survived),xpd = TRUE)
barplot(counts, main="Gender distribution", names.arg = c("Female","Male")
,xlab="gender",col=c("orange","green"),beside = TRUE)
bplot1 <- barplot(survived, main="survived",xlab="survived",col=c("yellow"),names.arg = c("no","yes"),horiz=TRUE)
bplot1 <- barplot(survived, main="survived",xlab="survived",col=c("#EC881D","#703092"),names.arg = c("no","yes"),horiz=TRUE)
bplot1 <- barplot(survived, main="survived",xlab="survived",col=c("#CD391F
","#703092"),names.arg = c("no","yes"),horiz=TRUE)
bplot1 <- barplot(survived, main="survived",xlab="survived",col=c("#CD391F","#703092"),names.arg = c("no","yes"),horiz=TRUE)
bplot1 <- barplot(survived, main="Survived",xlab="Count",col=c("#CD391F","#703092"),names.arg = c("No","Yes"),horiz=TRUE)
2201-711
711/2201
codes <- read.delim("C:/Users/AY186021/Desktop/Final Labs/codes.txt", header=FALSE)
View(codes)
codes <- read.csv("C:/Users/AY186021/Desktop/Final Labs/codes.txt", header=FALSE)
View(codes)
codes <- read.csv("C:/Users/AY186021/Desktop/Final Labs/codes.txt", header=FALSE)
View(codes)
avg <- read.csv("C:/Users/AY186021/Desktop/avg.txt", header=FALSE)
View(avg)
barplot(avg)
barplot(avg,beside = TRUE)
barplot(avg,beside = TRUE,height = 25)
hist(avg)
barplot(avg.v2)
barplot(counts, main="Gender distribution", names.arg = c("Female","Male")
;
counts <- table(titanic.dat$V3,titanic.dat$V4)
barplot(counts, main="Gender distribution", names.arg = c("Female","Male")
,xlab="gender",col=c("orange","green"),beside = TRUE)
barplot(survived,main = "survived",xlab="survived,col=c("yellow"))
barplot(survived, main="survived",xlab="survived",col=c("yellow"),names.arg = c("no","yes"))
View(table)
View(table)
barplot(25,avg)
barplot(alive)
counts <- avg
barplot(counts$V2)
barplot(counts$V2,names.arg = counts$V1)
barplot(counts$V2,names.arg = counts$V1,ylim = 25)
barplot(counts$V2,names.arg = counts$V1,ylim = 2)
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25) )
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Average Carrier Delay" )
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", legend.text = "Average Carrier Delay" )
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes" )
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Carrier Delay" )
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Carrier Delay",col = c("Yellow") )
B = matrix(  c(0.2227,0.3257,0.0833,0.1623,0.8695,0.9722,0.8602,0.4606,0,1.00,1.00,0.3417) nrow=4,ncol=3)
install.packages(ggplot2)
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Carrier Delay",col = c("Yellow") )
avg(avg$V2)
View(avg)
Average(avg$V2)
sum(avg$V2)/14
abline(h=15.19227)
B <- matrix(c(17460,20388,5394,3394,79071,1900,26981,8780,0),nrow = 3, ncol=3)
View(B)
rownames(B) <- c("EV","DL","WN")
colnames(B) <- c("Chicago","Atlanta","Dallas/Forth")
barplot(B, beside=TRUE,col = c("red","orange","thistle3"),bor=NA,main="Carreir And Citywise Distribution")
barplot(B, beside=TRUE,col = c("red","orange","thistle3"),bor=NA,main="Carreir And Citywise Distribution",ylim = c(0,80000))
barplot(B, beside=TRUE,col = c("red","orange","thistle3"),bor=NA,main="Carreir And Citywise Distribution",ylim = c(0,80000),xlab = "Cities",ylab = "Count")
legend(locator(1),rownames(B),fill=c("red","orange",thistle3"))
legend(locator(1),rownames(B),fill=c("red","orange",thistle3"))
legend(locator(1),rownames(B),fill=c("red","orange","thistle3"))
barplot(B, beside=TRUE,col = c("red","orange","thistle3"),bor=NA,main="Carreir And Citywise Distribution",ylim = c(0,80000),xlab = "Cities",ylab = "Count")
legend(locator(1),rownames(B),fill=c("red","orange","thistle3"))
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Carrier Delay",col = c("Yellow") )
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Carrier Delay",col = c("Yellow","red") )
abline(h=15.19227)
barplot(B, beside=TRUE,col = c("red","orange","thistle3"),bor=NA,main="Carreir And Citywise Distribution",ylim = c(0,80000),xlab = "Cities",ylab = "Count")
legend(locator(1),rownames(B),fill=c("red","orange","thistle3"))
barplot(counts$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Carrier Delay",col = c("Yellow","red") )
abline(h=15.19227)
avgw <- read.csv("C:/Users/AY186021/Desktop/avgw.csv", header=FALSE)
View(avgw)
barplot(avgw$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Yellow","red") )
barplot(avgw$V2,names.arg = counts$V1, ylim =c(0,25),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","purple"),ylim = c(0,5) )
barplot(avgw$V2,names.arg = counts$V1, ylim =c(0,5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","purple") )
barplot(avgw$V2,names.arg = counts$V1, ylim =c(0,5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","brown") )
barplot(avgw$V2,names.arg = counts$V1, ylim =c(0,5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","brown") )
sum(avgw$V2)/14
abline(h=1.535124)
barplot(avgw$V2,names.arg = counts$V1, ylim =c(0,5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","grey") )
abline(h=1.535124)
avgsd <- read.csv("C:/Users/AY186021/Desktop/avgsd.csv", header=FALSE)
View(avgsd)
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","grey") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,2),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","grey") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,1),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","grey") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Weather Delay",col = c("Blue","grey") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("Blue","grey") )
sum(avgsd$V2)/14
abline(h=0.05740409)
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.3),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("Blue","grey") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("dark green","grey") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("dark green","dark red") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.5),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("dark green","dark blue") )
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.3),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("dark green","dark blue") )
abline(h=0.05740409)
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.3),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("dark green","light blue") )
abline(h=0.05740409)
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.3),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("dark green","light blue") )
a = sum(avgsd$V2)/14
abline(h=a)
barplot(avgsd$V2,names.arg = counts$V1, ylim =c(0,0.3),xlab = "Carrier IDS",ylab = "Delay In Minutes", main = "Average Security Delay",col = c("dark green","light blue") )
a = sum(avgsd$V2)/14
abline(h=a)
library(ggplot2)
data(diamonds)
?diamonds
data(diamonds)
View(diamonds)
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)
R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.
R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.
Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
[Workspace loaded from ~/.RData]
31540000000-1915200000
31+28+31+30+31+30+31+31+30+31+30+3
(336*24*60*60*1000)
29030400000+39600000
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9.3.14)
z <- c(1.1,9.3.14)
z <-c(1.1,9.3.14)
c(1.1,9.3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/mmy_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)\
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
swirl()
library(swirk)
library(swirl)
swirl
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
?dir.create
getwd()
dir.create(C:/Users/AY186021/Documents/testdir)
dir.create(testdir)
dir.create()
dir.create(getwd)
dir.create(getwd())
dir.create(C:/Users/AY186021/testdir)
dir.create(testdir)
info()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
setwd("testdir")
ls()
list.dirs()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R,mytest2.R")
file.rename(from mytest.R, to mytest2.R)
?file.rename
file.rename("mytest.R"","mytest2.R"")
file.rename("mytest.R,"mytest2.R")
file.rename("mytest.R,"mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1","folder2")
dir.create(recursive = TRUE)
dir.create("folder1","folder2",recursive = TRUE)
?dir.create
dir.create("testdir2","testdir3",recursive = TRUE)
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir",recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
info()
bye()
clear
clear()
swirl()
library(swirl)
swirl
swirl()
2
bye()
swirl()
5+7
bye()
ls
library("swirl")
swirl()
info()
main()
1
main()
swirl()
getwd()
ls()
x <- 9 # assign 9 to x
ls()
list.files() # list all the files in your working directory using list.files() or dir().
?list.files #to check the help page for list.files
args(list.files) # the args function is used to determine the arguments to list.files()
old.dir <- getwd # assign the value of the current working directory to a variable called old.dir
old.dir <- getwd() # assign the value of the current working directory to a variable called old.dir
dir.create("testdir") #to create a directory in the current working directory called tesrdir
setwd(testdir) # set your working directory to testdir with setwd()
setwd("testdir") # set your working directory to testdir with setwd()
file.create("mytest.R") # create a file in your working directory using file.create() function
list.files()
file.exists("mytest.R") # check to see if mytest.R exists in the working directory using file.exists()
file.info("mytest.R") # acces information about file mytest.R using file.info()
file.rename("mytest.R","mytest2.R") # rename file mytest.R to mytest2.R
file.copy("mytest2.R","mytest3.R") # make a copy of mytest2.R called mytest3.R using file.copy()
file.path("mytest3.R") #proivde the relative path to file mytest3.R using file.path()
file.path("folder1","folder2") # Pass 'folder1' and 'folder2' as arguments to file.path to make a platform-independent pathname.
dir.create(file.path("folder1","folder2"),recursive = TRUE) # in order ti create nested directories 'recursive must be set to TRUE
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive = TRUE) # in order ti create nested directories 'recursive must be set to TRUE
unlink("tesrdir2") # delete the testdir2 directory
unlink("tesrdir2",recursive = TRUE) # delete the testdir2 directory with recursive = TRUE to delete subdirectories
unlink("testdir2",recursive = TRUE) # delete the testdir2 directory with recursive = TRUE to delete subdirectories
setwd(old.dir) # go back to original working directory
unlink("testdir",recursive = TRUE) # delete the testdir directory with everythin in it
swirl()
library(swirl)
swirl(0)
num_vect <- vector(c(0.5,55,-10,6))
num_vect <- vector("numeric",c(0.5,55,-10,6))
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("my","name","is")
my_char <- c("My","name","is") # create a character vector
my_char
paste(my_char, collapse = " ")
c(my_char,"Ankit")
my_name <- c(my_char,"Ankit")
my_name # print contents of my_name
paste(my_name,collapse = " ") # above paste function
paste("Hello","world!", sep = " ") # we can join two character vectors of length 1 using paste() where the sep tells R that we want to seprate the elements with a single space
paste(1:3,c("X","Y","Z"),sep = "") # a complex join of two vectors each of length 3
paste(LETTERS,1:4,sep = "-") # to show recycling function of R
bye()
104*150
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)] # will give us a subset of all NAs
y <-x[!is.na(x)] # # y will hold a value of all values except for NAs
y
y[y>0] # gives all of the positive elements of y
x[x>0] #
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)] # gives us all elements of x except for the 2nd and 10th elements
x[-c(2,10)] # same reslut as above
vect<- c(foo=11,bar=2,norf=NA) # create a vector with three named elements
vect # print vect to console
names(vect) # we can also get the names of vect by passong vect as an argument to the names()
vect2 <- c(11,2,NA) # create unamed vector vect2
names(vect2) <- c("foo","bar","norf") # add names to the vector vect2
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")] # to load the elements foo and bar from the vect vector
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector # view the contents of the vector you just created
dim(my_vector) # the dim() tells us the dimensions of an object
length(my_vector) # get the length of the my_vector
dim(my_vector) <- c(4,5) # give my_vect a dim attribute
dim(my_vector) # to confirm we've set the dim attribute
attributes(my_vector) # an alternative to the above command
my_vector # view the contents of my_vector
class(my_vector) # check the class of my_vect
my_vector <- my_matrix # store my_vector in a new variable called my_matrix
my_matrix <- my_vector # store my_vector in a new variable called my_matrix
?matirx # the help function for matrix
??matirx # the help function for matrix
?matrix # the help function for matrix
matrix (data = 1:20,nrow =4,ncol = 5) # create a matrix with 1-20 numbers and 4 rows and 5 columns
my_matrix2 <- matrix (data = 1:20,nrow =4,ncol = 5) # create a matrix with 1-20 numbers and 4 rows and 5 columns and store it in my_matrix2
identical(my_matrix,my_matrix2) # check if my_matrix and my_matrix2 are identical
parients <- c("Bill","Gina","Kelly","Sean") # create a character vector with four names
patients <- c("Bill","Gina","Kelly","Sean") # create a character vector with four names
cbind(patients,my_matrix) # Now we'll use the cbind() function to 'combine columns'. Don't worry about storing the result in a new variable
my_data <- data.frame(patients,my_matrix) # to avoid implicit corecion as the above command has changed all values to character
my_data # view contents of my_Data
class(my_data) # confirm the class of my_data
cnames <- c("patient","age","weight","bp","rating","test") # create a variable with column names
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data # check the contents of my_data
getwd()
setwd(/c/Users/AY186021/work/R-programming)
setwd("/c/Users/AY186021/work/R-programming")
setwd('/c/Users/AY186021/work/R-programming')
setwd(c/Users/AY186021/work/R-programming)
setwd(/c/Users/AY186021/work/R-programming)
setwd("/c/Users/AY186021/work/R-programming")
setwd("c/Users/AY186021/work/R-programming")
setwd("/Users/AY186021/work/R-programming")
ls()
list.files()
swirl()
library(swirl)
swirl()
head(flags) # to view the first 6 lines of the dataset flags
dim(flags) # to check the dimensions the flags
viewinfo(flags) # to open a more complete description of the dataset in a separate text file
class(flags) # to know the format for variables that have been stored
cls_list <- lapply(flags,class) # to apply the class() function to each column of the flags dataset and store the result in a variable called cls_list
cls_list # to view the contents of cls_list
class(cls_list) # to confirm that lapply() returned a list
as.character(cls_list)
cls_vect <- sapply(flags, class) # sapply calls lapply() behind the scenes and simplifies the result for us
class(cls_vect) # to confirm that sapply() simplified the result to character vector
sum(flags$orange) # if we want to know the total number of countries with, for example,color orange on thier flag
flag_colors <- flags[,11:17] #First, use flag_colors <- flags[, 11:17] to extract the columns containing the color data and store them in a new  data frame called flag_colors. (Note the comma before 11:17. This subsetting command tells R that we want all rows, but only columns 11 through 17.)
head(flag_colors) # to see the first 6 lines of flag_colors
color_sum <- lapply(flag_colors,sum) # to get a list containing the sum of each coloumn of flag_colors
lapply(flag_colors,sum) # to get a list containing the sum of each coloumn of flag_colors
sapply(flag_colors,sum) # to get a simplified vector
sapply(flag_colors,mean) # to find the proportion of flags containing each color
flag_shapes <- flags[,19:23] # will create a new data frame
lapply(flag_shapes,range) # the range function returns the min an max of its first argument which should be a numeric vector
shape_mat <- sapply(flag_shapes,range) # to simplify and store result in a matrix
shape_mat # view the contents of shape_mat
class(shape_mat) # to confirm the class of shape_mat
unique(c(3,4,5,5,5,6,6)) # to test the unique function
unique_vals <- lapply(flags,unique) # we want to know the unique values for each variable in the flags dataset
unique_vals # print the values of unique_vals
sapply(unique_vals,length) # to check the number of unique values for each variable
sapply(flags,unique) # check the above reuslt
lapply(unique_vals,function(elem) elem[2])
swirl()
